/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_include_2frpc_5fmessage_2eproto__INCLUDED
#define PROTOBUF_C_include_2frpc_5fmessage_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _RpcRequestExtension RpcRequestExtension;
typedef struct _RpcRequestHeader RpcRequestHeader;
typedef struct _RpcResponseHeader RpcResponseHeader;


/* --- enums --- */


/* --- messages --- */

struct  _RpcRequestExtension
{
  ProtobufCMessage base;
  int32_t id;
  int32_t length;
};
#define RPC_REQUEST_EXTENSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc_request_extension__descriptor) \
    , 0, 0 }


struct  _RpcRequestHeader
{
  ProtobufCMessage base;
  protobuf_c_boolean has_from_id;
  int32_t from_id;
  protobuf_c_boolean has_to_id;
  int32_t to_id;
  int32_t sequence;
  int32_t body_length;
  protobuf_c_boolean has_option;
  int32_t option;
  char *context_uri;
  char *from_computer;
  char *from_service;
  char *to_service;
  char *to_method;
  size_t n_extensions;
  RpcRequestExtension **extensions;
};
#define RPC_REQUEST_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc_request_header__descriptor) \
    , 0,0, 0,0, 0, 0, 0,0, NULL, NULL, NULL, NULL, NULL, 0,NULL }


struct  _RpcResponseHeader
{
  ProtobufCMessage base;
  int32_t sequence;
  int32_t response_code;
  int32_t body_length;
  protobuf_c_boolean has_option;
  int32_t option;
  protobuf_c_boolean has_to_id;
  int32_t to_id;
  protobuf_c_boolean has_from_id;
  int32_t from_id;
};
#define RPC_RESPONSE_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc_response_header__descriptor) \
    , 0, 0, 0, 0,0, 0,0, 0,0 }


/* RpcRequestExtension methods */
void   rpc_request_extension__init
                     (RpcRequestExtension         *message);
size_t rpc_request_extension__get_packed_size
                     (const RpcRequestExtension   *message);
size_t rpc_request_extension__pack
                     (const RpcRequestExtension   *message,
                      uint8_t             *out);
size_t rpc_request_extension__pack_to_buffer
                     (const RpcRequestExtension   *message,
                      ProtobufCBuffer     *buffer);
RpcRequestExtension *
       rpc_request_extension__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc_request_extension__free_unpacked
                     (RpcRequestExtension *message,
                      ProtobufCAllocator *allocator);
/* RpcRequestHeader methods */
void   rpc_request_header__init
                     (RpcRequestHeader         *message);
size_t rpc_request_header__get_packed_size
                     (const RpcRequestHeader   *message);
size_t rpc_request_header__pack
                     (const RpcRequestHeader   *message,
                      uint8_t             *out);
size_t rpc_request_header__pack_to_buffer
                     (const RpcRequestHeader   *message,
                      ProtobufCBuffer     *buffer);
RpcRequestHeader *
       rpc_request_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc_request_header__free_unpacked
                     (RpcRequestHeader *message,
                      ProtobufCAllocator *allocator);
/* RpcResponseHeader methods */
void   rpc_response_header__init
                     (RpcResponseHeader         *message);
size_t rpc_response_header__get_packed_size
                     (const RpcResponseHeader   *message);
size_t rpc_response_header__pack
                     (const RpcResponseHeader   *message,
                      uint8_t             *out);
size_t rpc_response_header__pack_to_buffer
                     (const RpcResponseHeader   *message,
                      ProtobufCBuffer     *buffer);
RpcResponseHeader *
       rpc_response_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc_response_header__free_unpacked
                     (RpcResponseHeader *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*RpcRequestExtension_Closure)
                 (const RpcRequestExtension *message,
                  void *closure_data);
typedef void (*RpcRequestHeader_Closure)
                 (const RpcRequestHeader *message,
                  void *closure_data);
typedef void (*RpcResponseHeader_Closure)
                 (const RpcResponseHeader *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor rpc_request_extension__descriptor;
extern const ProtobufCMessageDescriptor rpc_request_header__descriptor;
extern const ProtobufCMessageDescriptor rpc_response_header__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_include_2frpc_5fmessage_2eproto__INCLUDED */
